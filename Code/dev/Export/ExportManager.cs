using Microsoft.SharePoint;
using Microsoft.SharePoint.Deployment;
using SPS.Movement.Common;
using SPS.Movement.Common.Validation;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;

namespace SPS.Movement.Export
{
    public class ExportManager : IExportManager, IManifest
    {
        OptionsBO ops;
        public ExportManager(OptionsBO options)
        {
            ops = options;
        }

        public void GetDocuments()
        {
            //throw new NotImplementedException();
        }

        public void ExportToZip()
        {
            //throw new NotImplementedException();
        }

        public void ExportDocuments(RootManifestBO manifest)
        {
            xCheck.Require(manifest != null &&
                manifest.DocLibrary != null &&
                manifest.DocLibrary.ID != Guid.Empty);
            if (manifest.Folders != null)
                foreach (FolderItem folder in manifest.Folders)
                {
                    Helper.CreateDirectory(Path.Combine(
                        ops.ShareFolder,
                        manifest.DocLibrary.ID.ToString("N"),
                        folder.Path)
                        );
                }
        }

        void export_Completed(object sender, SPDeploymentEventArgs e)
        {

        }

        void export_Started(object sender, SPDeploymentEventArgs e)
        {

        }

        void export_ProgressUpdated(object sender, SPDeploymentEventArgs e)
        {
            
        }

        void export_Error(object sender, SPDeploymentErrorEventArgs e)
        {
            
        }
        public void Export(RootManifestBO manifest)
        {
            var list = new SPExportObject()
            {
                Id = manifest.DocLibrary.ID,
                ExcludeChildren = false,
                Url = ops.DocLibraryUrl,
                IncludeDescendants = SPIncludeDescendants.All,
                Type = SPDeploymentObjectType.List
            };
            SPExportSettings settings = new SPExportSettings();
            settings.SiteUrl = ops.WebUrl;
            settings.AutoGenerateDataFileName = true;
            settings.ExportObjects.Add(list);
            settings.LogFilePath = ops.ShareFolder + @"\" + settings.BaseFileName;
            settings.FileLocation = ops.ShareFolder + @"\test.txt";
            //settings.BaseFileName = "exportfile.cmp";
            settings.FileCompression = true;
            //settings.ExportPublicSchema = true;
            //settings.TestRun = true;
            settings.IncludeSecurity = SPIncludeSecurity.All;
            settings.IncludeVersions = SPIncludeVersions.All;
            settings.ExportMethod = SPExportMethodType.ExportAll;
            settings.OverwriteExistingDataFile = true; 
            SPExport export = new SPExport(settings);
            export.Error += export_Error;
            export.ProgressUpdated += export_ProgressUpdated;
            export.Started += export_Started;
            export.Completed += export_Completed;
            export.Run();
            var tt = settings.FileLocation + "\\" + settings.BaseFileName;
        }
        public void SaveManifest(RootManifestBO manifest)
        {
            xCheck.Require(manifest != null &&
                manifest.DocLibrary != null &&
                manifest.DocLibrary.ID != Guid.Empty);
            Helper.CreateDirectory(Path.Combine(ops.ShareFolder, manifest.DocLibrary.ID.ToString("N")));
            var writer = new XmlSerializer(typeof(RootManifestBO));
            var file = new StreamWriter(Path.Combine(
                ops.ShareFolder,
                manifest.DocLibrary.ID.ToString("N"),
                "RootManifest.xml"),
                false);
            writer.Serialize(file, manifest);
            file.Close();
        }

        public RootManifestBO CreateManifest()
        {
            RootManifestBO root = new RootManifestBO() { Type = MType.Export };
            root.Folders = new List<FolderItem>();
            root.Documents = new List<DocumentItem>();
            var docLib = SPManager.GetDocumentLibrary(ops.WebUrl, ops.DocLibraryUrl);
            if (docLib == null)
                throw new Exception("Document libary didn't find on the web");
            root.DocLibrary = new DocumentLibrary() { ID = docLib.ID, Title = docLib.Title };
            var query = new SPQuery() { ViewAttributes = "Scope=\"RecursiveAll\"" };
            var items = docLib.GetItems(query);
            foreach (SPListItem item in items)
            {
                if (item.Folder != null)
                    root.Folders.Add(new FolderItem()
                    {
                        ID = item.ID,
                        Title = item.Title,
                        Url = item.Url,
                        Created = Convert.ToDateTime(item[SPBuiltInFieldId.Created_x0020_Date].ToString()),
                        Modified = Convert.ToDateTime(item[SPBuiltInFieldId.Modified].ToString()),
                        Path = item.Url.Replace("/", @"\")
                    });
                else
                    root.Documents.Add(new DocumentItem()
                    {
                        ID = item.ID,
                        Title = item.Title,
                        Url = item.Url,
                        Created = Convert.ToDateTime(item[SPBuiltInFieldId.Created_x0020_Date].ToString()),
                        Modified = Convert.ToDateTime(item[SPBuiltInFieldId.Modified].ToString()),
                        HasPublishedVersion = item.HasPublishedVersion,
                        HasUniqueRoleAssignments = item.HasUniqueRoleAssignments
                    });
            }
            return root;
        }
    }
}
